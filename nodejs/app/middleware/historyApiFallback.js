const router = require('koa-router')()
const fs = require('fs')
const path = require('path')

const resolve = file => path.resolve(__dirname, file)
const isProd = process.env.NODE_ENV === 'production'

function createRenderer (bundle, template) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    template,
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

let renderer
let middleware
if (isProd) {
    // In production: create server renderer using server bundle and index HTML
    // template from real fs.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const bundle = require('../dist/vue-ssr-bundle.json')
    // src/index.template.html is processed by html-webpack-plugin to inject
    // build assets and output as dist/index.html.
    const template = fs.readFileSync(resolve('../dist/index.html'), 'utf-8')
    renderer = createRenderer(bundle, template)
} else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    middleware = require('../build/setup-dev-server')(router, (bundle, template) => {
        renderer = createRenderer(bundle, template)
    })
}

const ssr = async (ctx, next) => {
    if (!renderer) {
        return ctx.body = 'waiting for compilation... refresh in a moment.'
    }

    const s = Date.now()

    ctx.type = 'text/html'

    // const errorHandler = err => {
    //     if (err && err.code === 404) {
    //         // ctx.status = 404
    //         // ctx.body.write('404 | Page Not Found')
    //         // ctx.body.end()
    //         ctx.throw(404)
    //     } else {
    //         // Render Error Page or Redirect
    //         // ctx.status = 500
    //         // // ctx.body = '500 | Internal Server Error'
    //         // ctx.body.write('500 | Internal Server Error')
    //         // ctx.body.end()
    //         ctx.throw(500)
    //         console.error(`error during render : ${ctx.url}`)
    //         console.error(err)
    //     }
    // }
    const promise = new Promise((resolve, reject) => {
        renderer.renderToString({ url: ctx.url }, (err, data) => err ? reject(err) : resolve(data))
    })
    try {
        console.log(`${ctx.ip} whole request: ${Date.now() - s}ms`)
        return ctx.body = await promise
    } catch (e) {
        ctx.throw(e.code || 500)
    }
    // return ctx.body = renderer.renderToStream({ url: ctx.url })
    //                 .on('error', errorHandler)
    //                 .on('end', () => console.log(`whole request: ${Date.now() - s}ms`))

}

if (middleware) {
    router
        .use(middleware.devMiddleware)
        .use(middleware.hotMiddleware)
}

router
    .get('*', ssr)

module.exports = router
